Julia my life at rundom
0. juliaのマニュアルには必要なことが書かれているので読むべき。
　とはいえversionが変わると内容がかわるため、私自身は今のマニュアルを
　すべて読んでいるわけではない。

0.1 julia起動時に実行するスクリプト: ~/.juliarc.jl に書く
 LOAD_PATHに"."を追加している。
 push!(LOAD_PATH, ".")
 これは、moduleを作ったとき、usingやimportなどで同じ場所を探しに
 いってくれるようにするためだったと思う。

1. 私のjuliaの使い方。terminalとvimを使う。ideは使っていない。
 0) terminalをいくつかひらいて
 1) julia 実行
 2) jlファイルのディレクトリでvimでファイルを修正
 3) docsディレクトリで作業ログを書く(devlog)
 など
 
 4) ソースの構成。
 　あるディレクトリ直下に、jlとtest*.jlとload*.jlをまとめておいている。
 　テストではない、サンプル/デモ用のデータはdataディレクトリにおいている。
 　data/rundata.jlがそのデータ全部を実行する(simpleproverの呼び出し)
 　viewproverはdvcreso系と違う部分だけをおいている。
 　ほぼ共通のソースファイルは、最初はファイル単位でコピーして修正していた
 が、あるていど進んだ段階で違う部分だけにした。viewproverとsimpleproverを
 同じ環境で使うことはない。viewproverはGenieのループがまわるので。
 
　オリジナルのcheaplogic、viewproverなどはload_xxx.jlを作って必要な
ファイルだけをincludeしている。

5) config.jlでglobalな変数の設定をしている。たとえばevalonなど。
 
1.1 Jupyter notebookは、数年前にはよく使っていた。literate programmingに近いので。
　今は、人に説明する段階ではないので、その目的で使わなくなったから、notebookには
　していない。
　もっと直接的な理由は、文書が多くなり、自分でもわからなくなってきたのと、いろいろなアイデアがでてきてさらにわからなくなってきたからだろう。

1.2  JuliaBoxを使う
  JuliaBoxは無料版を使っていたが、10月いっぱい(2019年)でなくなるというので、有料に変更した。
  1500円/月が有益になるように、使い方を考え中。
  githubのcloneをJuliaBoxの中(ディレクトリとして)に持てる。
  JuliaBoxのimport/exportでpull/pushができるから、githubのjuliaboxブランチと
  つないで、開発もできる。
  
  githubではSSHキーを使っていたので、これをJuliaBoxと合わせないとcloneできなかった。
  gitlabはhttpsでアクセスするようにしているが、同じSSHキーでいけるのか? いけるような気がする。
 
2. デバッグ
 1) @showをprintfのかわりにつかう
 　　ある程度動くようになったら@showを@infoとかに変えたりもしたが、デバッグは@showのほうがわかりやすい。
 
 2) packageのDebuggerを使う。(julia1.2からでないと使えないのかも)
   Pkg]で add Debugger
   > using Debugger
   > @enter 式
       ?でコマンドがわかるので、デバッグする。

3. ソースの書き方
 # はコメント

 #==
  複数業のコメント
 ==#
 
 関数などのhelpの書き方。 関数定義の前に
 """
 関数の説明
 """
 function something()
# definition here 
 end
 
 こう書くと
 REPLで
 ?something
 としたとき
 関数の説明
 が表示される。
 macroやstructも同じだったと思う。
 
 4. REPLの使い方
  1) ヘルプ
    julia> ?名前
  で、その名前のドキュメントがあれば、それが表示される。
   COMMONLISPのように、apropos()という関数もある。こちらはpackage名がついてきたりするので、ちょっと手がかかる。  

  2) 一度実行した行をもう一度使いたいときは、その行の先頭部分を入力し、^p(emcsキーバインドや上むき矢印を打つと、それに一致する行だけが順番に表示され、表示されたあと改行で実行できる。
  その行は、矢印キーや^f/^bで移動し編集して実行することもできる。
  
  何も入力せずに^pをすると、前の行が表示される。
  
 2) 1.0以降は、packageの処理は、julia>で ] を入力したときにPackageのモードにかわる。
  そこで自分がよくやるバターン
   (v1.2) pkg> ?
   (v1.2) pkg> status
   (v1.2) pkg> add パッケージ
   (v1.2) pkg> build {パッケージ}
   (v1.2) pkg> update パッケージ
   などなど
   戻るときは、deleteで]を消すイメージ。
   
   3) シェルの実行
   julia> ;コマンド
   とするとプロンプトがかわって、shellモードになるので、そのままコマンドを入力するとshellで実行してくれる。
   julia> ;
   で
   shell>
   にかわり、そのままコマンドを入力する。
   
   ;ls
   ;pwd
   ;sh
   
   などをよく使う。pwdについては、juliaには pwd()という関数があるのでそれも使えるが、こちらのほうがタイプ数が少なくなるし応用が効くから好きなのだろう。
   
   macOS Catalinaからはデフォルトシェルがzshになったので、;shとするとzshが起動する。
   OS側でshellを変えればかわるのだろう。
   ちなみに、zshはタイプの指遣いがちょっと難しい。bashは1文字多いが簡単。
   
   ただし、; では、ワイルドカードは使えない。つまり
   ;ls *jl
   としても * が展開されないので
   ls: *.jl: No such file or directory
   となる。
   
   3)   juliaにはls()という関数はないので、メモリ上の関数をリストアップするls()を自作した。
   ls(パターン)も。apropos()だと関数名のリストが関数の値としては帰ってこないので、ls()には価値があるかな。
   
  
   5. ソースファイルの構成
    ModuleやPackageは作っていないので、単純な構成のみ。
    プログラムのファイルは拡張子 jlで作成する。
    REPL環境に読み込むのは
     julia> include("ファイル名")
     
     複数のjlがある場合は、load_xxxx.jl を作り、その中でincludeを実行
     julia> include("load_xxxx.jl")
     
     load_xxxx.jlの最後に
     println("load_xxxx.jl done")
     とか書いておくとどこまで進んだかわかるのでよいと思っている。
     
   6. テスト
   Juliaには、Test用のパッケージがある。
   
   using Test
   @testset "名前1" begin
     @test 式1
     @test 式2
  end
  
   と書いたファイルを作り、includeすればよい。
   @testのあとは式を書くので、
   @test 予想値 == 式
   というパターンになることも多い。
  @testマクロはいろいろあるので、helpやマニュアルで確認すること。
  
   @test_throws 例外 式 : 式から例外が投げられたかどうかをテスト
   @test_skip そのテストをスキップする(testの結果表示にその旨表示される)
   @test 1.3 ≈ fun() で、実数の比較。(昔はtest_approx_eqとかいうのがあった)
   などなど
   
   
 
 
 
